import { ContentType, EditHistory, FileContent, FlatRecord, Reaction, RECORD_TYPE } from "./declare";
export declare class Bullet<T extends RECORD_TYPE = RECORD_TYPE.TEXT> {
    static create(from: string, content: string, story: string, at?: Date, reactions?: Reaction[], extras?: Record<string, any>): Bullet<RECORD_TYPE.TEXT>;
    static createReply(from: string, content: string, story: string, reply: string, at?: Date, reactions?: Reaction[], extras?: Record<string, any>): Bullet<RECORD_TYPE.TEXT>;
    static createFile(from: string, files: FileContent[], story: string, at?: Date, reactions?: Reaction[], extras?: Record<string, any>): Bullet<RECORD_TYPE.FILE>;
    static createReplyFile(from: string, files: FileContent[], story: string, reply: string, at?: Date, reactions?: Reaction[], extras?: Record<string, any>): Bullet<RECORD_TYPE.FILE>;
    static createAttachment(from: string, text: string, files: FileContent[], story: string, at?: Date, reactions?: Reaction[], extras?: Record<string, any>): Bullet<RECORD_TYPE.ATTACHMENT>;
    static createReplyAttachment(from: string, text: string, files: FileContent[], story: string, reply: string, at?: Date, reactions?: Reaction[], extras?: Record<string, any>): Bullet<RECORD_TYPE.ATTACHMENT>;
    static createHtml(from: string, content: string, story: string, at?: Date, reactions?: Reaction[], extras?: Record<string, any>): Bullet<RECORD_TYPE.HTML>;
    static createReplyHtml(from: string, content: string, story: string, reply: string, at?: Date, reactions?: Reaction[], extras?: Record<string, any>): Bullet<RECORD_TYPE.HTML>;
    static fromRecord<T extends RECORD_TYPE = any>(record: FlatRecord<T>): Bullet<T>;
    private readonly _id;
    private readonly _at;
    private readonly _by;
    private readonly _story;
    private _content;
    private readonly _type;
    private _reactions?;
    private _editHistories?;
    private _reply?;
    private _isRobot?;
    private _isGenerated?;
    private _extras?;
    private constructor();
    get id(): string;
    get at(): Date;
    get by(): string;
    get story(): string;
    get content(): ContentType<T>;
    get type(): RECORD_TYPE;
    get reactions(): Reaction[];
    get reply(): string | undefined;
    get isRobot(): boolean;
    get isGenerated(): boolean;
    get extras(): Record<string, any>;
    get editHistories(): Array<EditHistory<T>>;
    editContent(newContent: ContentType<T>, by: string, at?: Date): this;
    pushEditHistory(newContent: ContentType<T>, by: string, at?: Date): this;
    hasReaction(by: string, type: string): boolean;
    addReaction(by: string, type: string, at?: Date): this;
    removeReaction(by: string, type: string): this;
    setExtra(key: string, value: any): this;
    setReply(reply: string): this;
    updateExtras(extras: Record<string, any>): this;
    setIsRobot(isRobot?: boolean): this;
    setIsGenerated(isGenerated?: boolean): this;
    getExtras(): Record<string, any>;
    getExtra(key: string): any;
    record(): FlatRecord<T>;
    hash(): string;
    clone(): Bullet<T>;
    equals(another: Bullet): boolean;
}
